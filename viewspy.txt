from django.shortcuts import render
from django.http import JsonResponse
from influxdb_client import InfluxDBClient

# URL, token, dan nama bucket untuk koneksi ke InfluxDB
url = "http://192.168.9.16:8086"
token = "huOa1-uFcQfnnouYBx8Yk_G4hA4CF0ASwfCMEN1VYmH6Cf4BS3ILYD1WJs2vGnRrfR7iThl4eouVAnz2EVLL-Q=="
org = "interntt"
bucket = "intern"

# Fungsi untuk menjalankan query ke InfluxDB dan mengambil data terbaru
def get_latest_data():
    with InfluxDBClient(url=url, token=token, org=org, timeout=20_000) as client:
        query_memory = """
            option v = {timeRangeStart: -1h, timeRangeStop: now()}

            from(bucket: "intern")
            |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
            |> filter(fn: (r) => r["_measurement"] == "memory")
            |> filter(fn: (r) => r["_field"] == "memused")
            |> filter(fn: (r) => r["host"] == "pve")
            |> filter(fn: (r) => r["object"] == "nodes")
        """
        query_cpustat = """
            option v = {timeRangeStart: -1h, timeRangeStop: now()}

            from(bucket: "intern")
            |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
            |> filter(fn: (r) => r["_measurement"] == "cpustat")
            |> filter(fn: (r) => r["_field"] == "cpu")
            |> filter(fn: (r) => r["host"] == "pve")
            |> filter(fn: (r) => r["object"] == "nodes")
        """
        query_additional_metric = """
            option v = {timeRangeStart: -1h, timeRangeStop: now()}

            from(bucket: "intern")
            |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
            |> filter(fn: (r) => r["_measurement"] == "blockstat")
            |> filter(fn: (r) => r["_field"] == "used")
            |> filter(fn: (r) => r["host"] == "pve")
            |> filter(fn: (r) => r["object"] == "nodes")
        """

        tables_memory = client.query_api().query(query_memory, org=org)
        tables_cpustat = client.query_api().query(query_cpustat, org=org)
        tables_additional_metric = client.query_api().query(query_additional_metric, org=org)

        records_memory = []
        records_cpustat = []
        records_additional_metric = []

        for table in tables_memory:
            for record in table.records:
                field_value = record.get_value()
                timestamp = record.get_time()
                records_memory.append({'field_value': field_value, 'timestamp': timestamp})

        for table in tables_cpustat:
            for record in table.records:
                field_value = record.get_value()
                timestamp = record.get_time()
                records_cpustat.append({'field_value': field_value, 'timestamp': timestamp})

        for table in tables_additional_metric:
            for record in table.records:
                field_value = record.get_value()
                timestamp = record.get_time()
                records_additional_metric.append({'field_value': field_value, 'timestamp': timestamp})

        return {'memory': records_memory, 'cpustat': records_cpustat, 'additional_metric': records_additional_metric}

def get_metrics(request):
    data = get_latest_data()
    return JsonResponse(data, safe=False)

def dashboard(request):
    data = get_latest_data()
    context = {'data': data}
    return render(request, 'dashboard.html', context)
